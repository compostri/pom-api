<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use App\Entity\Consumer;
use App\Entity\User;
use App\Entity\UserComposter;
use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;
use Doctrine\Migrations\Version\Version;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20201214134711 extends AbstractMigration implements ContainerAwareInterface
{


    /** @var ContainerInterface */
    private $container;

    /**
     * @param ContainerInterface|null $container
     */
    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    public function getDescription() : string
    {
        return '';
    }

    public function up(Schema $schema) : void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');

        $this->addSql('ALTER TABLE user ADD mailjet_id BIGINT DEFAULT NULL');


    }

    public function down(Schema $schema) : void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');

        $this->addSql('ALTER TABLE user DROP mailjet_id');
    }

    public function postUp(Schema $schema): void
    {
        parent::postUp($schema); // TODO: Change the autogenerated stub
        $em = $this->container->get('doctrine.orm.entity_manager');
        $userRepository = $em->getRepository(User::class);
        $consumers = $em->getRepository(Consumer::class)->findAll();

        /** @var Consumer $consumer */
        foreach($consumers as $consumer ){
            $user = $userRepository->findOneByEmail( $consumer->getEmail());

            if( ! $user ){
                $user = new User();
                $user->setEmail( $consumer->getEmail());
                $user->setPassword('tobochanged');
                $user->setUsername( $consumer->getUsername());
                $user->setUserConfirmedAccountURL('pas le cas');
                $user->setRoles(['ROLE_USER']);

            }
            $user->setMailjetId( $consumer->getMailjetId());
            $user->setEnabled(true);
            $em->persist($user);

            foreach ( $consumer->getComposters() as $composter ){

                $uc = new UserComposter();
                $uc->setUser( $user );
                $uc->setComposter( $composter);
                $uc->setCapability('User');
                $uc->setNewsletter(true);
                $em->persist($uc);

                $user->addUserComposter($uc);
            }

        }
        $em->flush();
    }
}
